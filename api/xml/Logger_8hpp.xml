<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="Logger_8hpp" kind="file" language="C++">
    <compoundname>Logger.hpp</compoundname>
    <includes local="no">chrono</includes>
    <includes local="no">csignal</includes>
    <includes refid="StringFormat_8hpp" local="yes">StringFormat.hpp</includes>
    <includes refid="LogLevels_8hpp" local="yes">LogLevels.hpp</includes>
    <includedby refid="Logger_8cpp" local="yes">src/Logger.cpp</includedby>
    <incdepgraph>
      <node id="4">
        <label>StringFormat.hpp</label>
        <link refid="StringFormat_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>iomanip</label>
      </node>
      <node id="8">
        <label>string</label>
      </node>
      <node id="1">
        <label>src/Logger.hpp</label>
        <link refid="Logger_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>LogLevels.hpp</label>
        <link refid="LogLevels_8hpp"/>
      </node>
      <node id="9">
        <label>vector</label>
      </node>
      <node id="7">
        <label>sstream</label>
      </node>
      <node id="6">
        <label>iostream</label>
      </node>
      <node id="2">
        <label>chrono</label>
      </node>
      <node id="3">
        <label>csignal</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>src/Logger.hpp</label>
        <link refid="Logger_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>src/Logger.cpp</label>
        <link refid="Logger_8cpp"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespaceShroon">Shroon</innernamespace>
    <innernamespace refid="namespaceShroon_1_1Logger">Shroon::Logger</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="Logger_8hpp_1a42d23c919dac4b9c2ef85648fcd22c31" prot="public" static="no">
        <name>SHRN_DEBUG_BREAK</name>
        <param></param>
        <initializer>raise(SIGABRT);</initializer>
        <briefdescription>
<para>Causes a debug break. Does <computeroutput>__debugbreak()</computeroutput> on MSVC, <computeroutput>raise(SIGTRAP)</computeroutput> on systems where <computeroutput>SIGTRAP</computeroutput> is defined and <computeroutput>raise(SIGABRT)</computeroutput> where it isn&apos;t. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Logger.hpp" line="39" column="13" bodyfile="src/Logger.hpp" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__DebugLoggingMacros_1ga082091eaa10a6b60b451943215478f33" prot="public" static="no">
        <name>SHRN_INFO</name>
        <param><defname>section</defname></param>
        <param><defname>...</defname></param>
        <initializer><ref refid="group__LoggingFunctions_1gacefeecc72630285763781fb2d19e9874" kindref="member">Shroon::Logger::LogInfo</ref>(section, <ref refid="group__FormatFunctions_1gad02b243d822da3a7692c15daa8f7508f" kindref="member">Shroon::Logger::Format</ref>(__VA_ARGS__));</initializer>
        <briefdescription>
<para>Calls <computeroutput><ref refid="group__LoggingFunctions_1gacefeecc72630285763781fb2d19e9874" kindref="member">Shroon::Logger::LogInfo()</ref></computeroutput> when macro <computeroutput>NDEBUG</computeroutput> is not defined i.e. in debug mode and when <computeroutput>SHRN_LOG_LEVEL &gt;= SHRN_LOG_LEVEL_INFO</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Logger.hpp" line="58" column="17" bodyfile="src/Logger.hpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__DebugLoggingMacros_1gac6e55d0d3fde8a23596097af946016bb" prot="public" static="no">
        <name>SHRN_WARNING</name>
        <param><defname>section</defname></param>
        <param><defname>...</defname></param>
        <initializer><ref refid="group__LoggingFunctions_1gaf5693f0952969dc5df1f2f25f0828715" kindref="member">Shroon::Logger::LogWarning</ref>(section, <ref refid="group__FormatFunctions_1gad02b243d822da3a7692c15daa8f7508f" kindref="member">Shroon::Logger::Format</ref>(__VA_ARGS__));</initializer>
        <briefdescription>
<para>Calls <computeroutput><ref refid="group__LoggingFunctions_1gaf5693f0952969dc5df1f2f25f0828715" kindref="member">Shroon::Logger::LogWarning()</ref></computeroutput> when macro <computeroutput>NDEBUG</computeroutput> is not defined i.e. in debug mode and when <computeroutput>SHRN_LOG_LEVEL &gt;= SHRN_LOG_LEVEL_WARNING</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Logger.hpp" line="68" column="17" bodyfile="src/Logger.hpp" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__DebugLoggingMacros_1gaa56b2b717f17ee88a3db73d61841c832" prot="public" static="no">
        <name>SHRN_ERROR</name>
        <param><defname>section</defname></param>
        <param><defname>...</defname></param>
        <initializer><ref refid="group__LoggingFunctions_1ga723dc684cb72a391b5ede51d08ce228d" kindref="member">Shroon::Logger::LogError</ref>(section, <ref refid="group__FormatFunctions_1gad02b243d822da3a7692c15daa8f7508f" kindref="member">Shroon::Logger::Format</ref>(__VA_ARGS__));</initializer>
        <briefdescription>
<para>Calls <computeroutput><ref refid="group__LoggingFunctions_1ga723dc684cb72a391b5ede51d08ce228d" kindref="member">Shroon::Logger::LogError()</ref></computeroutput> when macro <computeroutput>NDEBUG</computeroutput> is not defined i.e. in debug mode and when <computeroutput>SHRN_LOG_LEVEL &gt;= SHRN_LOG_LEVEL_ERROR</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Logger.hpp" line="78" column="17" bodyfile="src/Logger.hpp" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__DebugLoggingMacros_1gad182fd7956a1a98ca160b082033f6d57" prot="public" static="no">
        <name>SHRN_ASSERT</name>
        <param><defname>cond</defname></param>
        <param><defname>section</defname></param>
        <param><defname>...</defname></param>
        <initializer>if (!(cond)) { <ref refid="group__LoggingFunctions_1ga024813f717c47bb4675ec5885be6456d" kindref="member">Shroon::Logger::LogFatalError</ref>(section, <ref refid="group__FormatFunctions_1gad02b243d822da3a7692c15daa8f7508f" kindref="member">Shroon::Logger::Format</ref>(__VA_ARGS__)); }</initializer>
        <briefdescription>
<para>Calls <computeroutput><ref refid="group__LoggingFunctions_1ga024813f717c47bb4675ec5885be6456d" kindref="member">Shroon::Logger::LogFatalError()</ref></computeroutput> when macro <computeroutput>NDEBUG</computeroutput> is not defined i.e. in debug mode and when <computeroutput>SHRN_LOG_LEVEL &gt;= SHRN_LOG_LEVEL_ERROR</computeroutput> otherwise calls <computeroutput><ref refid="Logger_8hpp_1a42d23c919dac4b9c2ef85648fcd22c31" kindref="member">SHRN_DEBUG_BREAK()</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Logger.hpp" line="84" column="17" bodyfile="src/Logger.hpp" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ReleaseLoggingMacros_1ga5ed54637e55a99cc8dae71d38a0e06f8" prot="public" static="no">
        <name>SHRN_REL_INFO</name>
        <param><defname>section</defname></param>
        <param><defname>...</defname></param>
        <initializer><ref refid="group__LoggingFunctions_1gacefeecc72630285763781fb2d19e9874" kindref="member">Shroon::Logger::LogInfo</ref>(section, <ref refid="group__FormatFunctions_1gad02b243d822da3a7692c15daa8f7508f" kindref="member">Shroon::Logger::Format</ref>(__VA_ARGS__))</initializer>
        <briefdescription>
<para>Calls <computeroutput><ref refid="group__LoggingFunctions_1gacefeecc72630285763781fb2d19e9874" kindref="member">Shroon::Logger::LogInfo()</ref></computeroutput> when <computeroutput>SHRN_LOG_LEVEL &gt;= SHRN_LOG_LEVEL_INFO</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Logger.hpp" line="114" column="13" bodyfile="src/Logger.hpp" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ReleaseLoggingMacros_1ga7630f02b8fe937d2eca788af90d81c98" prot="public" static="no">
        <name>SHRN_REL_WARNING</name>
        <param><defname>section</defname></param>
        <param><defname>...</defname></param>
        <initializer><ref refid="group__LoggingFunctions_1gaf5693f0952969dc5df1f2f25f0828715" kindref="member">Shroon::Logger::LogWarning</ref>(section, <ref refid="group__FormatFunctions_1gad02b243d822da3a7692c15daa8f7508f" kindref="member">Shroon::Logger::Format</ref>(__VA_ARGS__))</initializer>
        <briefdescription>
<para>Calls <computeroutput><ref refid="group__LoggingFunctions_1gaf5693f0952969dc5df1f2f25f0828715" kindref="member">Shroon::Logger::LogWarning()</ref></computeroutput> when <computeroutput>SHRN_LOG_LEVEL &gt;= SHRN_LOG_LEVEL_WARNING</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Logger.hpp" line="124" column="13" bodyfile="src/Logger.hpp" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ReleaseLoggingMacros_1ga7b8152bf3365a23b956b6633402a5950" prot="public" static="no">
        <name>SHRN_REL_ERROR</name>
        <param><defname>section</defname></param>
        <param><defname>...</defname></param>
        <initializer><ref refid="group__LoggingFunctions_1ga723dc684cb72a391b5ede51d08ce228d" kindref="member">Shroon::Logger::LogError</ref>(section, <ref refid="group__FormatFunctions_1gad02b243d822da3a7692c15daa8f7508f" kindref="member">Shroon::Logger::Format</ref>(__VA_ARGS__))</initializer>
        <briefdescription>
<para>Calls <computeroutput><ref refid="group__LoggingFunctions_1ga723dc684cb72a391b5ede51d08ce228d" kindref="member">Shroon::Logger::LogError()</ref></computeroutput> when <computeroutput>SHRN_LOG_LEVEL &gt;= SHRN_LOG_LEVEL_ERROR</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Logger.hpp" line="134" column="13" bodyfile="src/Logger.hpp" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ReleaseLoggingMacros_1gacbd93347f4705e2449336faaf932894c" prot="public" static="no">
        <name>SHRN_REL_ASSERT</name>
        <param><defname>cond</defname></param>
        <param><defname>section</defname></param>
        <param><defname>...</defname></param>
        <initializer>if (!(cond)) { <ref refid="group__LoggingFunctions_1ga024813f717c47bb4675ec5885be6456d" kindref="member">Shroon::Logger::LogFatalError</ref>(section, <ref refid="group__FormatFunctions_1gad02b243d822da3a7692c15daa8f7508f" kindref="member">Shroon::Logger::Format</ref>(__VA_ARGS__)); }</initializer>
        <briefdescription>
<para>Calls <computeroutput><ref refid="group__LoggingFunctions_1ga024813f717c47bb4675ec5885be6456d" kindref="member">Shroon::Logger::LogFatalError()</ref></computeroutput> when <computeroutput>SHRN_LOG_LEVEL &gt;= SHRN_LOG_LEVEL_ERROR</computeroutput> otherwise calls <computeroutput><ref refid="Logger_8hpp_1a42d23c919dac4b9c2ef85648fcd22c31" kindref="member">SHRN_DEBUG_BREAK()</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Logger.hpp" line="140" column="13" bodyfile="src/Logger.hpp" bodystart="140" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/></highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2020<sp/>Saroj<sp/>Kumar.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;chrono&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;csignal&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="StringFormat_8hpp" kindref="compound">StringFormat.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="LogLevels_8hpp" kindref="compound">LogLevels.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>the<sp/>default<sp/>log<sp/>level<sp/>if<sp/>none<sp/>is<sp/>defined.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SHRN_LOG_LEVEL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>log<sp/>level<sp/>as<sp/>Info.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>SHRN_LOG_LEVEL<sp/>SHRN_LOG_LEVEL_INFO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>SHRN_DEBUG_BREAK()<sp/>__debugbreak();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(SIGTRAP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>SHRN_DEBUG_BREAK()<sp/>raise(SIGTRAP);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="Logger_8hpp_1a42d23c919dac4b9c2ef85648fcd22c31" refkind="member"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>SHRN_DEBUG_BREAK()<sp/>raise(SIGABRT);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Debug<sp/>mode<sp/>macros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="preprocessor">#ifndef<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>log<sp/>level<sp/>is<sp/>set<sp/>at<sp/>Info<sp/>then<sp/>define<sp/>SHRN_INFO.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>SHRN_LOG_LEVEL<sp/>&gt;=<sp/>SHRN_LOG_LEVEL_INFO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="group__DebugLoggingMacros_1ga082091eaa10a6b60b451943215478f33" refkind="member"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>SHRN_INFO(section,<sp/>...)<sp/>Shroon::Logger::LogInfo(section,<sp/>Shroon::Logger::Format(__VA_ARGS__));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>SHRN_INFO(...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>log<sp/>level<sp/>is<sp/>set<sp/>above<sp/>or<sp/>at<sp/>Warning<sp/>then<sp/>define<sp/>SHRN_WARNING.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>SHRN_LOG_LEVEL<sp/>&gt;=<sp/>SHRN_LOG_LEVEL_WARNING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="group__DebugLoggingMacros_1gac6e55d0d3fde8a23596097af946016bb" refkind="member"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>SHRN_WARNING(section,<sp/>...)<sp/>Shroon::Logger::LogWarning(section,<sp/>Shroon::Logger::Format(__VA_ARGS__));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>SHRN_WARNING(...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>log<sp/>level<sp/>is<sp/>set<sp/>above<sp/>or<sp/>at<sp/>Error<sp/>then<sp/>define<sp/>SHRN_ERROR<sp/>and<sp/>SHRN_ASSERT.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>SHRN_LOG_LEVEL<sp/>&gt;=<sp/>SHRN_LOG_LEVEL_ERROR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="group__DebugLoggingMacros_1gaa56b2b717f17ee88a3db73d61841c832" refkind="member"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>SHRN_ERROR(section,<sp/>...)<sp/>Shroon::Logger::LogError(section,<sp/>Shroon::Logger::Format(__VA_ARGS__));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="group__DebugLoggingMacros_1gad182fd7956a1a98ca160b082033f6d57" refkind="member"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>SHRN_ASSERT(cond,<sp/>section,<sp/>...)<sp/>if<sp/>(!(cond))<sp/>{<sp/>Shroon::Logger::LogFatalError(section,<sp/>Shroon::Logger::Format(__VA_ARGS__));<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>SHRN_ERROR(...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>SHRN_ASSERT(...)<sp/>SHRN_DEBUG_BREAK();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>define<sp/>non-release<sp/>macros<sp/>in<sp/>Release<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>SHRN_INFO(...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>SHRN_WARNING(...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>SHRN_ERROR(...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>SHRN_ASSERT(...)<sp/>SHRN_DEBUG_BREAK();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Release<sp/>mode<sp/>macros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="comment">//<sp/>If<sp/>log<sp/>level<sp/>is<sp/>set<sp/>above<sp/>or<sp/>at<sp/>Info<sp/>then<sp/>define<sp/>SHRN_REL_INFO.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SHRN_LOG_LEVEL<sp/>&gt;=<sp/>SHRN_LOG_LEVEL_INFO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="group__ReleaseLoggingMacros_1ga5ed54637e55a99cc8dae71d38a0e06f8" refkind="member"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>SHRN_REL_INFO(section,<sp/>...)<sp/>Shroon::Logger::LogInfo(section,<sp/>Shroon::Logger::Format(__VA_ARGS__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>SHRN_REL_INFO(...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>log<sp/>level<sp/>is<sp/>set<sp/>above<sp/>or<sp/>at<sp/>Warning<sp/>then<sp/>define<sp/>SHRN_REL_WARNING.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SHRN_LOG_LEVEL<sp/>&gt;=<sp/>SHRN_LOG_LEVEL_WARNING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="group__ReleaseLoggingMacros_1ga7630f02b8fe937d2eca788af90d81c98" refkind="member"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>SHRN_REL_WARNING(section,<sp/>...)<sp/>Shroon::Logger::LogWarning(section,<sp/>Shroon::Logger::Format(__VA_ARGS__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>SHRN_REL_WARNING(...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>log<sp/>level<sp/>is<sp/>set<sp/>to<sp/>Error<sp/>then<sp/>define<sp/>SHRN_REL_ERROR<sp/>and<sp/>SHRN_REL_ASSERT.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SHRN_LOG_LEVEL<sp/>&gt;=<sp/>SHRN_LOG_LEVEL_ERROR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="134" refid="group__ReleaseLoggingMacros_1ga7b8152bf3365a23b956b6633402a5950" refkind="member"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>SHRN_REL_ERROR(section,<sp/>...)<sp/>Shroon::Logger::LogError(section,<sp/>Shroon::Logger::Format(__VA_ARGS__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="140" refid="group__ReleaseLoggingMacros_1gacbd93347f4705e2449336faaf932894c" refkind="member"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>SHRN_REL_ASSERT(cond,<sp/>section,<sp/>...)<sp/>if<sp/>(!(cond))<sp/>{<sp/>Shroon::Logger::LogFatalError(section,<sp/>Shroon::Logger::Format(__VA_ARGS__));<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>SHRN_REL_ERROR(...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>SHRN_REL_ASSERT(...)<sp/>SHRN_DEBUG_BREAK()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceShroon" kindref="compound">Shroon</ref></highlight></codeline>
<codeline lineno="156"><highlight class="normal">{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Logger</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceShroon_1_1Logger_1a5bedca55a64a8d427291bc1e1b636de6" kindref="member">SetOStream</ref>(std::ostream<sp/>&amp;<sp/>out);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__LoggingFunctions_1gacefeecc72630285763781fb2d19e9874" kindref="member">LogInfo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>section,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>log);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__LoggingFunctions_1gaf5693f0952969dc5df1f2f25f0828715" kindref="member">LogWarning</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>section,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>log);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__LoggingFunctions_1ga723dc684cb72a391b5ede51d08ce228d" kindref="member">LogError</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>section,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>log);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__LoggingFunctions_1ga024813f717c47bb4675ec5885be6456d" kindref="member">LogFatalError</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>section,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>log);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/Logger.hpp"/>
  </compounddef>
</doxygen>
