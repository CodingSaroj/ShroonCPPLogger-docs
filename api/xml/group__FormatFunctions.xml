<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="group__FormatFunctions" kind="group">
    <compoundname>FormatFunctions</compoundname>
    <title>FormatFunctions</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__FormatFunctions_1gaf2c3d4dd71579dedd7a7112a35e2d187" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Shroon::Logger::FormatBase</definition>
        <argsstring>(const std::string &amp;format, std::initializer_list&lt; std::string &gt; args)</argsstring>
        <name>FormatBase</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>format</declname>
        </param>
        <param>
          <type>std::initializer_list&lt; std::string &gt;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Outputs a string with all the &quot;{}&quot; replaced with each element in <computeroutput>args</computeroutput> inside <computeroutput>format</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>An <computeroutput>const std::string &amp;</computeroutput> which needs to be formatted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>An <computeroutput>std::initializer_list</computeroutput> containing format args.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An <computeroutput>std::string</computeroutput> with all the &quot;{}&quot; replaced with each element in <computeroutput>args</computeroutput> inside <computeroutput>format</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/StringFormat.cpp" line="22" column="21" bodyfile="src/StringFormat.cpp" bodystart="22" bodyend="25" declfile="src/StringFormat.hpp" declline="49" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__FormatFunctions_1ga2d629dfea0f535722b83c4b578930ef1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Shroon::Logger::FormatBase</definition>
        <argsstring>(std::string &amp;&amp;format, std::initializer_list&lt; std::string &gt; args)</argsstring>
        <name>FormatBase</name>
        <param>
          <type>std::string &amp;&amp;</type>
          <declname>format</declname>
        </param>
        <param>
          <type>std::initializer_list&lt; std::string &gt;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Outputs an <computeroutput>std::string</computeroutput> with all the &quot;{}&quot; replaced with each element in <computeroutput>args</computeroutput> inside <computeroutput>format</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>An <computeroutput>std::string &amp;&amp;</computeroutput> which needs to be formatted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>An <computeroutput>std::initializer_list</computeroutput> containing format args.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An <computeroutput>std::string</computeroutput> with all the &quot;{}&quot; replaced with each element in <computeroutput>args</computeroutput> inside <computeroutput>format</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/StringFormat.cpp" line="27" column="21" bodyfile="src/StringFormat.cpp" bodystart="27" bodyend="212" declfile="src/StringFormat.hpp" declline="59" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__FormatFunctions_1ga6357c147f5f92ed56459f2ca21c55af6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>IOSFlagTypes</declname>
            <defname>IOSFlagTypes</defname>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string Shroon::Logger::ToString</definition>
        <argsstring>(const Type &amp;t, IOSFlagTypes... flags)</argsstring>
        <name>ToString</name>
        <param>
          <type>const Type &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>IOSFlagTypes...</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Converts variable of type <computeroutput>Type</computeroutput> to <computeroutput>std::string</computeroutput> using <computeroutput>operator&lt;&lt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of variable which will be converted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IOSFlagTypes</parametername>
</parameternamelist>
<parameterdescription>
<para>A parameter pack of types of functors which will be passed to <computeroutput>operator&lt;&lt;</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable to convert to string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Flags to pass to stream before variable.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An <computeroutput>std::string</computeroutput> version of variable according to the <computeroutput>operator&lt;&lt;</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/StringFormat.hpp" line="73" column="28" bodyfile="src/StringFormat.hpp" bodystart="73" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="group__FormatFunctions_1gad02b243d822da3a7692c15daa8f7508f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string Shroon::Logger::Format</definition>
        <argsstring>(const std::string &amp;format, Args... args)</argsstring>
        <name>Format</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>format</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Outputs a string with all the &quot;{}&quot; replaced with positional <computeroutput>args</computeroutput> inside <computeroutput>format</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>- An <computeroutput>std::string</computeroutput> which needs to be formatted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>- Argument pack of variables containing format args.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>- An <computeroutput>std::string</computeroutput> with all the &quot;{}&quot; replaced with <computeroutput>args</computeroutput> inside <computeroutput>format</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/StringFormat.hpp" line="90" column="21" bodyfile="src/StringFormat.hpp" bodystart="90" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="group__FormatFunctions_1ga95382785ae66ce6f2fedd4d69ee00d27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string Shroon::Logger::Format</definition>
        <argsstring>(std::string &amp;&amp;format, Args... args)</argsstring>
        <name>Format</name>
        <param>
          <type>std::string &amp;&amp;</type>
          <declname>format</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Outputs a string with all the &quot;{}&quot; replaced with positional <computeroutput>args</computeroutput> inside <computeroutput>format</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>An <computeroutput>std::tring</computeroutput> which needs to be formatted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument pack of variables containing format args.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An <computeroutput>std::string</computeroutput> with all the &quot;{}&quot; replaced with <computeroutput>args</computeroutput> inside <computeroutput>format</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/StringFormat.hpp" line="107" column="21" bodyfile="src/StringFormat.hpp" bodystart="107" bodyend="115"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This group consists of all the functions used for formatting. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
